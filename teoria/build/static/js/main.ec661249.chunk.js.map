{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+LAceA,EAZF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCWzB,EAfF,WAEX,OADgBI,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC4E9BK,EAzFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WAERC,IAEChB,MAAK,SAAAiB,GACJP,EAASO,QAEV,IACHC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAwBMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAA9B,GAAI,OAAuB,IAAnBA,EAAKG,aAoB5B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGQ,EAAYE,KAAI,SAAA/B,GAAI,OACnB,kBAAC,EAAD,CACEgC,IAAKhC,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBA/BD,SAAAY,GAEzB,IAAMb,EAAOiB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAErB,KAAOA,KAChCsB,EAAW,2BAAQnC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqB,EACQX,EAAIsB,GACX3B,MAAK,SAAA4B,GACJlB,EAASD,EAAMc,KAAI,SAAA/B,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOoC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUvC,EAAKI,QADf,sCAGLc,EAASD,EAAMa,QAAO,SAAAI,GAAC,OAAIA,EAAErB,KAAOA,SAiBN2B,CAAmBxC,EAAKa,WAGtD,0BAAM4B,SA9DI,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBxC,QAASe,EACT0B,MAAM,IAAIC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAI7BzB,EACUoB,GACPpC,MAAK,SAAA4B,GACJlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,SAiDT,2BACE+B,MAAOhC,EACPiC,SA9Ce,SAACV,GACxBhB,QAAQC,IAAIe,EAAMW,OAAOF,OACzB/B,EAAWsB,EAAMW,OAAOF,UA8ClB,4BAAQG,KAAK,UAAb,WClFVC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ec661249.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance  }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/notes'\n//const baseUrl = 'https://part3-theory-testing-heroku.herokuapp.com/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  export default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    //console.log('effect')\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    //console.log('button clicked', event.target)\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      //id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n    const toggleImportanceOf = id => {\n      //console.log(`importance of ${id} needs to be toggled`)\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important }\n\n      noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n    }\n  \n    return (\n      <div>\n        <h1>Notes</h1>\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all' }\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map(note => \n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)} />\n          )}\n        </ul>\n        <form onSubmit={addNote}>\n          <input \n            value={newNote} \n            onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n        </form>   \n      </div>\n    )\n  \n} \n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}