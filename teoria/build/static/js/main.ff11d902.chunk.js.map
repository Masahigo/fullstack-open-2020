{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","console","log","length","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","handleNoteChange","target","value","notesToShow","filter","handleLogin","loginService","setItem","stringify","setTimeout","onSubmit","type","name","onChange","map","key","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff11d902.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance  }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/notes'\n//const baseUrl = 'https://part3-theory-testing-heroku.herokuapp.com/api/notes'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  /*const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }*/\n\n  const create = async newObject => {\n    const config = {\n      headers: { Authorization: token },\n    }\n  \n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  export default { getAll, create, update, setToken }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport loginService from './services/login' \n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    //console.log('effect')\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    //console.log('button clicked', event.target)\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      //id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n    const toggleImportanceOf = id => {\n      //console.log(`importance of ${id} needs to be toggled`)\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important }\n\n      noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        //alert(\n        //  `the note '${note.content}' was already deleted from server`\n        //)\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n\n        setNotes(notes.filter(n => n.id !== id))\n      })\n    }\n\n    const handleLogin = async (event) => {\n      event.preventDefault()\n      //console.log('logging in with', username, password)\n      try {\n        const user = await loginService.login({\n          username, password,\n        })\n        //console.log('user: ', user)\n        window.localStorage.setItem(\n          'loggedNoteappUser', JSON.stringify(user)\n        ) \n        noteService.setToken(user.token)\n        setUser(user)\n        setUsername('')\n        setPassword('')\n      } catch (exception) {\n        setErrorMessage('wrong credentials')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }\n    }\n\n    const loginForm = () => (\n      <>\n        <h2>Login</h2>\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n              <input\n              type=\"text\"\n              value={username}\n              name=\"Username\"\n              onChange={({ target }) => setUsername(target.value)}\n            />\n          </div>\n          <div>\n            password\n              <input\n              type=\"password\"\n              value={password}\n              name=\"Password\"\n              onChange={({ target }) => setPassword(target.value)}\n            />\n          </div>\n          <button type=\"submit\">login</button>\n        </form>\n      </>\n    )\n\n    const noteForm = () => (\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    )\n  \n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n\n        {user === null ?\n          loginForm() :\n          <div>\n            <p>{user.name} logged in</p>\n            {noteForm()}\n          </div>\n        }\n\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all' }\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map(note => \n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)} />\n          )}\n        </ul>\n       \n      </div>\n    )\n  \n} \n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}