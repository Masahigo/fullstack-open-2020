{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","status","Filter","value","handleOnChange","onChange","PersonForm","props","console","log","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","deleteClick","map","person","key","name","number","onClick","Notification","message","content","className","App","useState","setPersons","setNewName","setNewNumber","nameFilter","setNameFilter","notificationMessage","setNotificationMessage","useEffect","personsService","initialPersons","catch","error","length","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","updatePerson","find","p","window","confirm","changedPerson","returnedPerson","notificationMessageObject","setTimeout","concat","personToRemove","returnedStatusCode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f60baabb.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.status)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst Filter = ({ value, handleOnChange }) => {\n  return (\n    <div>filter shown with \n          <input \n            value={value} \n            onChange={handleOnChange} \n          />\n      </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  console.log(props)\n  return (\n    <form onSubmit={props.addName}>\n        <div>\n          name: \n          <input \n            value={props.newName} \n            onChange={props.handleNameChange} \n          />\n        </div>\n        <div>number: \n          <input \n            value={props.newNumber} \n            onChange={props.handleNumberChange} \n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Persons = ({ persons, deleteClick }) => {\n  return (\n    <>\n      {persons.map(person => \n        <div key={person.id}>\n          {person.name} {person.number}\n          &nbsp;\n          <button onClick={() => deleteClick(person)}>delete</button>\n        </div>\n      )}\n    </>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message.content === null) {\n    return null\n  }\n\n  return (\n    <div className={message.type}>\n      {message.content}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage] = useState({ content: null, type: null })\n\n  useEffect(() => {\n    console.log('effect')\n    personsService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n      .catch(error => {\n\n        const notificationMessageObject = {\n          content: `Could not connect to server (db.json)`,\n          type: 'error',\n        }\n\n        setNotificationMessage(notificationMessageObject)\n      })\n  }, [])\n  \n  console.log('render', persons.length, 'persons')\n\n  const addName = (event) => {\n    event.preventDefault()\n\n    const updatePerson = persons.find(p => p.name === newName)\n    if(updatePerson) {\n      console.log('update person: ', updatePerson)\n      const message = `${newName} is already added to phonebook, replace the old number with a new one?`\n      const result = window.confirm(message)\n      if(result) {\n        const changedPerson = { ...updatePerson, number: newNumber }\n        console.log('changed person: ', changedPerson)\n        personsService\n          .update(updatePerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== updatePerson.id ? person : returnedPerson))\n\n            const notificationMessageObject = {\n              content: `Updated phone number for ${returnedPerson.name}`,\n              type: 'success',\n            }\n  \n            setNotificationMessage(notificationMessageObject)\n  \n            setTimeout(() => {\n              setNotificationMessage({ content: null, type: null})\n            }, 2000)\n          })\n          .catch(error => {\n\n            const notificationMessageObject = {\n              content: `Information of '${updatePerson.name}' has already been removed from server`,\n              type: 'error',\n            }\n\n            setNotificationMessage(notificationMessageObject)\n\n            setTimeout(() => {\n              setNotificationMessage({ content: null, type: null})\n            }, 5000)\n\n            setPersons(persons.filter(p => p.id !== updatePerson.id))\n          })\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      \n      personsService\n        .create(personObject)\n        .then(returnedPerson => {\n          //console.log('promise fulfilled')\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          \n          const notificationMessageObject = {\n            content: `Added ${returnedPerson.name}`,\n            type: 'success',\n          }\n\n          setNotificationMessage(notificationMessageObject)\n\n          setTimeout(() => {\n            setNotificationMessage({ content: null, type: null})\n          }, 2000)\n        })\n        .catch(error => {\n\n          //console.log('error.response.data: ', error.response.data)\n\n          const notificationMessageObject = {\n            content: error.response.data.error,\n            type: 'error',\n          }\n\n          setNotificationMessage(notificationMessageObject)\n\n          setTimeout(() => {\n            setNotificationMessage({ content: null, type: null})\n          }, 5000)\n\n        })\n    \n    }\n    \n  }\n\n  const handleNameChange = (event) => {\n    //console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n\n  const handleDeleteClick = (personToRemove) => {\n    let message = `Delete ${personToRemove.name}?`\n    const result = window.confirm(message)\n    if(result) {\n      personsService\n        .remove(personToRemove.id)\n        .then(returnedStatusCode => {\n            console.log(\"returned status code: \", returnedStatusCode)\n            setPersons(persons.filter(person => person.id !== personToRemove.id))\n            //setPersons(persons.map(person => person.id !== personToRemove.id ? person : returnedPerson))\n            const notificationMessageObject = {\n              content: `Deleted ${personToRemove.name}`,\n              type: 'success',\n            }\n  \n            setNotificationMessage(notificationMessageObject)\n  \n            setTimeout(() => {\n              setNotificationMessage({ content: null, type: null})\n            }, 2000)\n        })\n    }\n  }\n\n  const personsToShow = nameFilter.length === 0\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(nameFilter))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Filter value={nameFilter} handleOnChange={handleNameFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm \n        addName={addName} newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} deleteClick={handleDeleteClick} />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}